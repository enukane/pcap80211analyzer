#!/usr/bin/env ruby -Ku

$:.unshift File.dirname(__FILE__)

require "optparse"
require "ouisearch.rb"
require "bit_utils"

class Histogram < Hash
  def initialize
    super
    @uniq = false
  end

  def add key, density=1
    self[key] = 0 if self[key] == nil
    self[key] += density
  end

  def add_uniq key, elm, force_uniq=false
    @uniq = true
    self[key] = [] unless self[key].is_a?(Array)
    if force_uniq == true
      self[key] << elm unless self[key].include?(elm)
    else
      self[key] << elm
    end
  end

  def keep_uniq
    self.each do |k, v|
      self[k] = v.uniq
    end
  end

  def fill ary, value=0
    ary.each do |k|
      self[k] = value if self[k] == nil
    end
  end

  def to_csv
    str = ""
    self.each do |key, value|
      str += "#{key},#{@uniq ? value.length : value}\n"
    end
    return str
  end

  def to_csv_key_sorted keyfilter=nil
    str = ""
    self.to_a.sort{|a, b| a[0] <=> b[0]}.each do |key, value|
      if keyfilter and keyfilter.is_a?(Hash)
        str += "#{keyfilter[key] ? keyfilter[key] : key},#{@uniq ? value.length : value}\n"
      else
        str += "#{key},#{@uniq ? value.length : value}\n"
      end
    end
    return str
  end

  def to_csv_value_sorted keyfilter=nil
    str = ""
    self.to_a.sort{|a, b| a[1] <=> b[1]}.each do |key, value|
      if keyfilter and keyfilter.is_a?(Hash)
        str += "#{keyfilter[key] ? keyfilter[key] : key},#{value}\n"
      else
        str += "#{key},#{value}\n"
      end
    end
    return str
  end

  def to_csv_value_sorted_10 keyfilter=nil
    str = ""
    sorted = self.to_a.sort {|a, b| a[1] <=> b[1]}
    rev_sorted = sorted.reverse
    other = (rev_sorted[10..-1] || [["", 0]]).inject(0){|sum, elm| sum + elm[1]}
    rev_sorted10 = rev_sorted[0..9].concat([["OTHER", other]])
    sorted10 = rev_sorted10.reverse
    sorted10.each do |key, value|
      if keyfilter and keyfilter.is_a?(Hash)
        str += "#{keyfilter[key] ? keyfilter[key] : key},#{value}\n"
      else
        str += "#{key},#{value}\n"
      end
    end
    return str
  end

end

NUM2TYPENAME = {
  # management
  0x00  => "Association Request",
  0x01  => "Association Response",
  0x02  => "Reassociation Request",
  0x03  => "Reassociation Response",
  0x04  => "Probe Request",
  0x05  => "Probe Response",
  0x08  => "Beacon",
  0x09  => "ATIM",
  0x0a  => "Disassociation",
  0x0b  => "Authentication",
  0x0c  => "Deauthentication",
  0x0d  => "Action",
  # control
  0x18  => "Block Ack Request",
  0x19  => "Block Ack",
  0x1a  => "PS-Poll",
  0x1b  => "RTS",
  0x1c  => "CTS",
  0x1d  => "ACK",
  0x1e  => "CF-end",
  0x1f  => "CF-end + CF-ack",
  # data
  0x20  => "Data",
  0x21  => "Data + CF-ack",
  0x22  => "Data + CF-poll",
  0x23  => "Data + CF-ack + CF-poll",
  0x24  => "Null",
  0x25  => "CF-ack",
  0x26  => "CF-poll",
  0x27  => "CF-ack + CF-poll",
  0x28  => "QoS data",
  0x29  => "QoS data + CF-ack",
  0x2a  => "QoS data + CF-poll",
  0x2b  => "QoS data + CF-ack + CF-poll",
  0x2c  => "QoS Null",
  0x2d  => "Reserved",
  0x2e  => "QoS + CF-poll (no data)",
  0x2f  => "QoS + CF-ack (nodata)",
}

def num2type(num)
  case (num & 0xf0) >> 4
  when 0
    return "Management"
  when 1
    return "Control"
  when 2
    return "Data"
  end
  return "Unknown"
end

FREQ2CHAN = {
  0     => 0, # why radiotap.channel.freq can be 0?
  # 2.4GHz
  2412  => 1,
  2417  => 2,
  2422  => 3,
  2427  => 4,
  2432  => 5,
  2437  => 6,
  2442  => 7,
  2447  => 8,
  2452  => 9,
  2457  => 10,
  2462  => 11,
  2467  => 12,
  2472  => 13,
  #  2484  => 14,

  # japan client only
  5170  => 34,
  5190  => 38,
  5210  => 42,
  5230  => 46,

  # W52
  5180  => 36,
  5200  => 40,
  5220  => 44,
  5240  => 48,

  # W53
  5260  => 52,
  5280  => 56,
  5300  => 60,
  5320  => 64,

  # W56
  5500  => 100,
  5520  => 104,
  5540  => 108,
  5560  => 112,
  5580  => 116,
  5600  => 120,
  5620  => 124,
  5640  => 128,
  5660  => 132,
  5680  => 136,
  5700  => 140,
  5720  => 144,
  5745  => 149,
  5765  => 153,
  5785  => 157,
  5805  => 161,
  5825  => 165,

  # 802.11j
  #4920  => 184,
  #4940  => 188,
  #4960  => 192,
  #4980  => 194,
}
CHANNELS=FREQ2CHAN.values

DATARATES = [1, 2, 5, 6, 7, 9, 11, 12, 13, 14, 18, 19, 21, 24, 26, 27, 28, 36, 39, 43, 48, 52, 54, 57, 58, 65, 72, 78, 81, 86, 104, 108, 115, 117, 130, 144, 150]

class Pcap80211Analyzer
  OUTPUTDIR="output"

  TYPE_ADDR_SUBTYPE="addr_n_subtype"
  TYPE_RADIOTAP="radiotap"

  OPT_NOBADFCS = " -Y 'radiotap.flags.badfcs == 0'"

  MIN=60
  HOUR=MIN*60
  DAY=24*HOUR
  SUFFIX = { :day => "d", :hour => "h", :min => "m", :sec => "s" }

  def initialize args={}
    @pcappath = args[:pcappath]
    @pcapbasename = File.basename(@pcappath) if @pcappath
    @time = args[:time] || false
    @force = args[:force] || false
    @debug = args[:debug] || false

    @ouisearch = OuiSearch.new(:reload => false, :debug => @debug)

    @cache = {}

    check
  end

  def check
    if @pcappath == nil or @pcappath == ""
      raise "no pcap file specified"
    end

    unless system("tshark -h > /dev/null")
      raise "tshark not found"
    end

    # create or check output directory
    check_n_generate_output_dir
  end

  def check_n_generate_output_dir
    path = File.expand_path(File.dirname($0))
    parentpath = path + "/" + OUTPUTDIR
    outputpath = path + "/" + OUTPUTDIR + "/" + @pcapbasename

    unless Dir.exists?(parentpath)
      Dir.mkdir(parentpath)
    end

    unless Dir.exists?(outputpath)
      Dir.mkdir(outputpath) # do not handle exception
    end

    @outputpath = outputpath
  end

  def dp str
    print "#{str}\n" if @debug
  end

  def list_commands
    methods = self.methods - Object.methods
    cmds = []
    methods.each do |func|
      match = func.to_s.match(/^execute_(.+)$/)
      next unless match
      next if match[1] == "all" or match[1] == "list"
      cmds << match[1]
    end
    return cmds
  end

  def sec_to_s sec
    date = { :day => 0, :hour => 0, :min => 0, :sec => 0 }
    date[:day] = sec / DAY
    sec %= DAY
    date[:hour] = sec / HOUR
    sec %= HOUR
    date[:min] = sec / MIN
    sec %= MIN
    date[:sec] = sec

    str = ""
    [:day, :hour, :min, :sec].each do |sym|
      str += "#{date[sym]}#{SUFFIX[sym]}" if date[sym] > 0
    end
    return str
  end

  # cache op
  def get_cache_path type
    raise "type is invalid (#{type})" if type == nil or type == ""
    return @outputpath + "/" + type
  end

  def put_cache_data type, data
    path = get_cache_path(type)
    File.open(path, "w") do |file|
      file.write(data)
    end
    @cache[type] = data
    return true
  end

  def get_cache_data type
    if @cache[type] != nil
      return @cache[type]
    end

    data = nil
    path = get_cache_path(type)
    unless File.exists?(path)
      return nil
    end
    File.open(path) do |file|
      data = file.read
    end
    @cache[type] = data
    return data
  end

  # tshark
  def do_tshark type, options
    unless @force
      cached = get_cache_data(type)
      return cached if cached
    end

    STDERR.puts "tshark cache not found: renew one\n"
    io = IO.popen("tshark -E separator=, #{options} -T fields -r #{@pcappath}")
    data = io.read

    put_cache_data(type, data)
    return data
  end

  # sub utilities
  def tshark_addr_n_subtype
    return do_tshark(TYPE_ADDR_SUBTYPE,
                     "-e 'wlan.ta' -e 'wlan.sa' -e 'wlan.ra' -e 'wlan.fc.type_subtype' -e 'wlan.bssid'" +
                     OPT_NOBADFCS
                    )
  end

  def tshark_addr_n_subtype_to_a
    ary = []
    if @cached_tshark_addr_n_subtype
      return @cached_tshark_addr_n_subtype
    end
    tshark_addr_n_subtype().split("\n").each do |line|
      ta, sa, ra, st, bssid = line.split(",")
      ary << {
        :ta => ta,
        :sa => sa,
        :ra => ra,
        :st => st.to_i,
        :bssid => bssid,
      }
    end
    @cached_tshark_addr_n_subtype = ary
    return ary
  end

  def tshark_addr_n_subtype_each
    tshark_addr_n_subtype_to_a.each do |hash|
      yield(hash[:ta], hash[:sa], hash[:ra], hash[:st], hash[:bssid])
    end
  end

  def tshark_radiotap
    return do_tshark(TYPE_RADIOTAP,
                     " -e 'frame.time_epoch'" +
                     " -e 'frame.len'" +
                     " -e 'radiotap.length'" +
                     " -e 'radiotap.datarate'" +
                     " -e 'radiotap.dbm_antsignal'" +
                     " -e 'radiotap.channel.freq'" +
                     " -e 'radiotap.flags.badfcs'" +
                     " -e 'wlan.fc.type_subtype'" +
                     " -e 'wlan.ta'" +
                     " -e 'wlan.sa'" +
                     " -e 'wlan.ra'" +
                     " -e 'wlan.bssid'" +
                     " -e 'wlan.fc.retry'" +
                     " -e 'wlan_mgt.ssid'" +
                     " -e 'wlan_radio.duration'" +
                     " -e 'wlan_mgt.fixed.ssc.sequence'" +
                     " -e 'wlan.ba.bm'" +
                     " -e 'radiotap.mcs.index'"
                    )
  end

  def tshark_radiotap_to_a
    ary = []
    if @cached_tshark_radiotap
      return @cached_tshark_radiotap
    end
    tshark_radiotap().split("\n").each do |line|
      time, framelen, taplen, rate, signal, freq, badfcs, st, ta, sa, ra, bssid, _retry, ssid, duration, ba_start, ba_bm, ht_mcs = line.split(",")
      elm = {
        :time     => time.to_f,
        :framelen => framelen.to_i,
        :taplen   => taplen.to_i,
        :rate     => rate.to_i,
        :signal   => signal.to_i,
        :chan     => FREQ2CHAN[freq.to_i],
        :badfcs   => (badfcs.to_i == 1),
        :st       => st.to_i,
        :ta       => ta,
        :sa       => sa,
        :ra       => ra,
        :bssid    => bssid,
        :retry    => (_retry.to_i == 1),
        :ssid     => ssid,
        :duration => duration.to_i,
        :ba_start => ba_start.to_i,
        :ba_bm    => ba_bm.nil? ? 0 : ba_bm.split(":").join.to_i(16),
        :ht_mcs   => ht_mcs.nil? ? -1 : ht_mcs.to_i,
      }
      next if elm[:chan] == nil or elm[:chan] == 0
      ary << elm
    end

    @cached_tshark_radiotap = ary
    return ary
  end

  def tshark_radiotap_each(accept_badfcs=false)
    tshark_radiotap_to_a.each do |hash|
      if !accept_badfcs and hash[:badfcs]
        next
      end

      yield(
        hash
      )
      #(
      #  hash[:time],
      #  hash[:framelen],
      #  hash[:taplen],
      #  hash[:rate],
      #  hash[:signal],
      #  hash[:chan],
      #  hash[:badfcs],
      #  hash[:st],
      #  hash[:ta],
      #  hash[:sa],
      #  hash[:ra],
      #  hash[:bssid],
      #  hash[:retry]
      #)
    end
  end

  # util specific
  def uniq_aps
    aps = []
    tshark_addr_n_subtype_each do |ta, sa, ra, st, bssid|
      aps << bssid
    end
    return aps.compact.sort.uniq
  end

  def uniq_stas
    stas = []
    tshark_addr_n_subtype_each do |ta, sa, ra, st, bssid|
      stas << ta
      stas << ra
    end
    return stas.compact.sort.uniq
  end

  def uniq_stas_wo_ap
    stas = uniq_stas
    aps = uniq_aps
    return (stas - aps).compact.sort.uniq
  end

  def uniq_stas_with_data
    stas = []
    tshark_addr_n_subtype_each do |ta, sa, ra, st, bssid|
      if 0x20 <= st and st < 0x30
        stas << ta
        stas << ra
      end
    end
    return stas.compact.sort.uniq
  end

  def uniq_aps_with_data
    aps = []
    tshark_addr_n_subtype_each do |ta, sa, ra, st, bssid|
      if 0x20 <= st and st < 0x30
        aps << bssid
      end
    end
    return aps.compact.sort.uniq
  end

  def uniq_stas_with_data_wo_ap
    stas = uniq_stas_with_data
    aps = uniq_aps_with_data
    return (stas - aps).compact.sort.uniq
  end

  def iterate_chan totaling, iteratee
    prev_chan = nil
    accum = nil

    tshark_radiotap_to_a.each do |hash|
      cur_chan = hash[:chan]
      cur_time = hash[:time]
      if prev_chan != cur_chan
        unless prev_chan.nil?
          # channel changed
          totaling.call(accum)
        end

        prev_chan = cur_chan
        accum = {
          :chan => cur_chan,
          :start_time => cur_time,
        }
      end

      accum = iteratee.call(accum, hash)
    end
  end

  def uniq_ssid
    ssid_hash = {}

    tshark_radiotap_each do |hash|
      st = hash[:st]
      ta = hash[:ta]
      ssid = hash[:ssid]

      next unless st == 8 or st == 5
      next if hash[:ssid].nil? or hash[:ssid].length == 0

      if ssid_hash[ssid].nil?
        ssid_hash[ssid] = []
      end

      ssid_hash[ssid] << ta
      ssid_hash[ssid]
    end

    return ssid_hash
  end

  def uniq_ssid_histogram
    ssid_hash = uniq_ssid()

    hist = Histogram.new
    ssid_hash.to_a.map{|elm|
      [elm[0], elm[1].compact.sort.uniq.length]
    }.sort{|a, b|
      a[1] <=> b[1]
    }.each{|elm|
      1.upto(elm[1]){|n|
        hist.add(elm[0])
      }
    }

    return hist
  end

  # execute
  def execute cmd, args
    @args = args
    func = "execute_" + cmd
    methods = self.methods - Object.methods

    unless methods.include?(func.to_sym)
      raise "no such command (#{cmd})"
    end

    before = Time.now if @time
    send(func)
    print("\nLatest execution time: #{Time.now - before}\n") if @time
  end

  # execute_subcommand
  def execute_help
    execute_list
  end
  def execute_list
    cmds = list_commands()

    print "Supported Commands:\n"
    cmds.sort.each do |cmd|
      print "- #{cmd}\n"
    end
  end

  def execute_all
    cmds = list_commands().delete("all_output_csv")

    print "<<< EXECUTE ALL COMMANDS >>>\n\n"
    cmds.sort.each do |cmd|
      print "< EXECUTE #{cmd} >\n"
      send("execute_" + cmd)
      print "\n\n"
    end
    print "<<< EXECUTE DONE >>>\n"
  end

  def execute_all_output_csv
    dir = @args[:csvdir]
    raise "no dir specified" if dir == nil
    cmds = list_commands()
    print "<<< EXECUTE and OUTPUT ALL COMMANDS >>>\n"
    cmds.sort.each do |cmd|
      next if cmd.match(/^all_.+$/)
      begin
        $stdout = File.open("#{dir}/#{cmd}.csv", "w")
        send("execute_" + cmd)
        $stdout.flush
        $stdout.close
        $stdout = STDOUT
        print "DONE: #{cmd}\n"
      rescue => e
        $stdout.flush
        $stdout = STDOUT
        STDERR.print "FAILED: #{cmd} (#{e}, #{e.backtrace})\n"
      end
    end
    print "<<< EXECUTE DONE>>>\n"
  end

  def execute_uniq_ap
    aps = uniq_aps()
    aps.each do |addr|
      print "#{addr}\n"
    end
  end

  def execute_uniq_ap_num
    aps = uniq_aps()
    print "Total #AP: #{aps.length}\n"
  end

  def execute_uniq_ap_num_per_band
    ap5 = []
    ap24 = []
    tshark_radiotap_each do |hash|
      st = hash[:st]
      chan = hash[:chan]
      ta = hash[:ta]
      unless st == 8 or st == 5
        next
      end
      if chan.to_i > 13
        ap5 << ta
      else
        ap24 << ta
      end
    end

    uniq5 = ap5.compact.sort.uniq
    uniq24 = ap24.compact.sort.uniq
    uniq_com = uniq5 & uniq24

    total = uniq_aps().length.to_f
    rate24 = (uniq24.length - uniq_com.length) / total * 100
    rate5 = (uniq5.length - uniq_com.length) / total * 100
    rate_com = (uniq_com.length) / total * 100

    print "TotalAP, #{total}, 100\n"
    print "2.4GHz, #{uniq24.length}, #{rate24}\n"
    print "5GHz, #{uniq5.length}, #{rate5}\n"
    print "both, #{uniq_com.length}, #{rate_com}\n"
  end

  def execute_uniq_ap_oui_histogram
    hist = Histogram.new
    aps = uniq_aps()
    aps.each do |addr|
      oui = addr[0..7]
      vendor = @ouisearch.execute(oui)
      hist.add(vendor.gsub(",", "").split[0..1].join(" "))
    end

    print "#{hist.to_csv_value_sorted}\n"
  end

  def execute_uniq_ap_oui_histogram_10
    hist = Histogram.new
    aps = uniq_aps()
    aps.each do |addr|
      oui = addr[0..7]
      vendor = @ouisearch.execute(oui)
      hist.add(vendor.gsub(",", "").split[0..1].join(" "))
    end

    print "#{hist.to_csv_value_sorted_10}\n"
  end

  def execute_uniq_ap_oui_5_histogram
    hist = Histogram.new
    addrs = []
    tshark_radiotap_each do |hash|
      st = hash[:st]
      chan = hash[:chan]
      ta = hash[:ta]
      next unless st == 0x8 or st == 0x5
      next unless chan.to_i > 13
      addrs << ta
    end

    addrs.compact.sort.uniq.each do |addr|
      oui = addr[0..7]
      vendor = @ouisearch.execute(oui)
      hist.add(vendor.gsub(",", "").split[0..1].join(" "))
    end

    print "#{hist.to_csv_value_sorted}\n"
  end

  def execute_uniq_ap_oui_5_histogram_10
    hist = Histogram.new
    addrs = []
    tshark_radiotap_each do |hash|
      st = hash[:st]
      chan = hash[:chan]
      ta = hash[:ta]
      next unless st == 0x8 or st == 0x5
      next unless chan.to_i > 13
      addrs << ta
    end

    addrs.compact.sort.uniq.each do |addr|
      oui = addr[0..7]
      vendor = @ouisearch.execute(oui)
      hist.add(vendor.gsub(",", "").split[0..1].join(" "))
    end

    print "#{hist.to_csv_value_sorted_10}\n"
  end

  def execute_uniq_ap_oui_24_histogram
    hist = Histogram.new
    addrs = []
    tshark_radiotap_each do |hash|
      st = hash[:st]
      chan = hash[:chan]
      ta = hash[:ta]
      next unless st == 0x8 or st == 0x5
      next unless chan.to_i <= 13
      addrs << ta
    end

    addrs.compact.sort.uniq.each do |addr|
      oui = addr[0..7]
      vendor = @ouisearch.execute(oui)
      hist.add(vendor.gsub(",", "").split[0..1].join(" "))
    end

    print "#{hist.to_csv_value_sorted}\n"
  end

  def execute_uniq_ap_oui_24_histogram_10
    hist = Histogram.new
    addrs = []
    tshark_radiotap_each do |hash|
      st = hash[:st]
      chan = hash[:chan]
      ta = hash[:ta]
      next unless st == 0x8 or st == 0x5
      next unless chan.to_i <= 13
      addrs << ta
    end

    addrs.compact.sort.uniq.each do |addr|
      oui = addr[0..7]
      vendor = @ouisearch.execute(oui)
      hist.add(vendor.gsub(",", "").split[0..1].join(" "))
    end

    print "#{hist.to_csv_value_sorted_10}\n"
  end

  def execute_uniq_sta
    stas = uniq_stas()
    stas.each do |addr|
      print "#{addr}\n"
    end
  end

  def execute_uniq_sta_num
    stas = uniq_stas()
    print "Total #STA: #{stas.length}\n"
  end

  def execute_uniq_sta_wo_ap
    stas = uniq_stas_wo_ap
    stas.each do |addr|
      print "#{addr}\n"
    end
  end

  def execute_uniq_sta_wo_ap_num
    stas = uniq_stas_wo_ap()
    print "Total #non-AP-STA: #{stas.length}\n"
  end

  def execute_sta_with_data_num
    stas = uniq_stas_with_data
    print "Total #STA-with-data: #{stas.length}\n"
  end

  def execute_ap_with_date
    aps = uniq_aps_with_data
    aps.each do |addr|
      print "#{addr}\n"
    end
  end

  def execute_ap_with_data_num
    aps = uniq_aps_with_data
    print "Total #AP-with-data: #{aps.length}\n"
  end

  def execute_sta_with_data_wo_ap_num
    stas = uniq_stas_with_data_wo_ap
    print "Total #STA-with-data-without-AP: #{stas.length}\n"
  end


  def execute_uniq_sta_num_per_band
    sta5 = []
    sta24 = []
    tshark_radiotap_each do |hash|
      chan = hash[:chan]
      ta = hash[:ta]
      ra = hash[:ra]

      if chan.to_i > 13
        sta5 << ta if ta
        sta5 << ra if ra
      else
        sta24 << ta if ta
        sta24 << ra if ra
      end
    end

    uniq5 = sta5.compact.sort.uniq
    uniq24 = sta24.compact.sort.uniq
    uniq_com = uniq5 & uniq24

    total = uniq_stas().length.to_f
    rate24 = (uniq24.length - uniq_com.length) / total * 100
    rate5 = (uniq5.length - uniq_com.length) / total * 100
    rate_com = (uniq_com.length) / total * 100

    print "TotalSTA, #{total}, 100\n"
    print "2.4GHz, #{uniq24.length}, #{rate24}\n"
    print "5GHz, #{uniq5.length}, #{rate5}\n"
    print "both, #{uniq_com.length}, #{rate_com}\n"
  end

  def execute_subtype_histogram
    hist = Histogram.new
    tshark_addr_n_subtype_each do |ta, sa, ra, st, bssid|
      hist.add(st)
    end

    print "#{hist.to_csv_key_sorted(NUM2TYPENAME)}\n"
  end

  def execute_subtype_24_histogram
    hist = Histogram.new
    tshark_radiotap_each do |hash|
      chan = hash[:chan]
      st = hash[:st]
      next unless chan
      next if chan > 13
      hist.add(st)
    end

    print "#{hist.to_csv_key_sorted(NUM2TYPENAME)}\n"
  end

  def execute_subtype_5_histogram
    hist = Histogram.new
    tshark_radiotap_each do |hash|
      chan = hash[:chan]
      st = hash[:st]
      next unless chan
      next if chan < 13
      hist.add(st)
    end

    print "#{hist.to_csv_key_sorted(NUM2TYPENAME)}\n"
  end

  def execute_uniq_sta_oui_histogram
    hist = Histogram.new
    stas = uniq_stas()
    stas.each do |addr|
      oui = addr[0..7]
      vendor = @ouisearch.execute(oui)
      hist.add(vendor.gsub(",", "").split[0..1].join(" "))
    end

    print "#{hist.to_csv_value_sorted}\n"
  end

  def execute_uniq_sta_oui_histogram_10
    hist = Histogram.new
    stas = uniq_stas()
    stas.each do |addr|
      oui = addr[0..7]
      vendor = @ouisearch.execute(oui)
      hist.add(vendor.gsub(",", "").split[0..1].join(" "))
    end

    print "#{hist.to_csv_value_sorted_10}\n"
  end

  def execute_uniq_sta_with_data_histogram_10
    hist = Histogram.new
    stas = uniq_stas_with_data
    stas.each do |addr|
      oui = addr[0..7]
      vendor = @ouisearch.execute(oui)
      hist.add(vendor.gsub(",", "").split[0..1].join(" "))
    end

    print "#{hist.to_csv_value_sorted_10}\n"
  end

  def execute_channel_histogram
    hist = Histogram.new
    tshark_radiotap_each do |hash|
      chan = hash[:chan]
      next if chan == nil
      hist.add(chan)
    end
    hist.fill(CHANNELS)

    print "#{hist.to_csv_key_sorted()}\n"
  end

  def execute_time_term
    ary = tshark_radiotap_to_a()
    first_time = ary[0][:time].to_i
    last_time = ary[-1][:time].to_i
    first_date = Time.at(first_time)
    last_date = Time.at(last_time)
    time_term = last_time - first_time

    print "Start Time, #{first_time}, #{first_date.to_s}\n"
    print "Last Time, #{last_time}, #{last_date.to_s}\n"
    print "Time Term, #{time_term}, #{sec_to_s(time_term)}\n"
  end

  def execute_frame_num
    ary = tshark_radiotap_to_a()
    print "Frame Num, #{ary.length}\n"
  end

  def execute_frame_num_per_band
    frame5 = 0
    frame24 = 0
    tshark_radiotap_each do |hash|
      chan = hash[:chan]
      if chan.to_i > 13
        frame5 += 1
      else
        frame24 += 1
      end
    end

    total = (frame24 + frame5).to_f
    rate5 = frame5 / total * 100.0
    rate24 = frame24 / total * 100.0

    print "TotalFrames, #{frame5+frame24}, 100\n"
    print "2.4GHz, #{frame24}, #{rate24}\n"
    print "5GHz, #{frame5}, #{rate5}\n"
  end

  def execute_type_histogram
    hist = Histogram.new
    hist24 = Histogram.new
    hist5 = Histogram.new

    tshark_radiotap_each do |hash|
      st = hash[:st]
      chan = hash[:chan]
      type = num2type(st)
      hist.add(type)
      if chan.to_i > 13
        hist5.add(type)
      else
        hist24.add(type)
      end
    end

    print "#Type, Frame Num\n"
    print "#{hist.to_csv_key_sorted()}\n\n"

    print "#Type 2.4GHz, Frame Num\n"
    print "#{hist24.to_csv_key_sorted()}\n\n"

    print "#Type 5GHz, Frame Num\n"
    print "#{hist5.to_csv_key_sorted()}\n\n"
  end

  def execute_data_frame_num
    frame_num = 0
    tshark_radiotap_each do |hash|
      st = hash[:st]
      if 0x20 <= st and st < 0x30
        frame_num += 1
      end
    end

    print "DataFrameNum, #{frame_num}\n"
  end

  def execute_data_frame_num_per_band
    frame5 = 0
    frame24 = 0
    tshark_radiotap_each do |hash|
      st = hash[:st]
      chan = hash[:chan]
      next unless 0x20 <= st and st < 0x30
      if chan.to_i > 13
        frame5 += 1
      else
        frame24 += 1
      end
    end

    total = (frame24 + frame5).to_f
    rate5 = frame5 / total * 100.0
    rate24 = frame24 / total * 100.0

    print "TotalDataFrames, #{frame5+frame24}, 100\n"
    print "2.4GHz, #{frame24}, #{rate24}\n"
    print "5GHz, #{frame5}, #{rate5}\n"
  end

  def execute_mgmt_frame_num_per_band
    frame5 = 0
    frame24 = 0
    tshark_radiotap_each do |hash|
      st = hash[:st]
      chan = hash[:chan]
      next if st > 0x0d
      if chan.to_i > 13
        frame5 += 1
      else
        frame24 += 1
      end
    end

    total = (frame24 + frame5).to_f
    rate5 = frame5 / total * 100.0
    rate24 = frame24 / total * 100.0

    print "TotalMgmtFrames, #{frame5+frame24}, 100\n"
    print "2.4GHz, #{frame24}, #{rate24}\n"
    print "5GHz, #{frame5}, #{rate5}\n"
  end

  def execute_ctrl_frame_num
    frame_num = 0
    tshark_radiotap_each do |hash|
      st = hash[:st]
      if 0x0d < st and st < 0x20
        frame_num += 1
      end
    end

    print "CtrlFrameNum, #{frame_num}\n"
  end

  def execute_ctrl_frame_num_per_band
    frame5 = 0
    frame24 = 0
    tshark_radiotap_each do |hash|
      st = hash[:st]
      chan = hash[:chan]
      next unless 0x0d < st and st < 0x20
      if chan.to_i > 13
        frame5 += 1
      else
        frame24 += 1
      end
    end

    total = (frame24 + frame5).to_f
    rate5 = frame5 / total * 100.0
    rate24 = frame24 / total * 100.0

    print "TotalCtrlFrames, #{frame5+frame24}, 100\n"
    print "2.4GHz, #{frame24}, #{rate24}\n"
    print "5GHz, #{frame5}, #{rate5}\n"
  end

  def execute_rate_histogram
    hist = Histogram.new
    tshark_radiotap_each do |hash|
      rate = hash[:rate]
      hist.add(rate)
    end

    print "#Rate, Count\n"
    print "#{hist.to_csv_key_sorted()}\n"
  end

  def execute_rate_24_histogram
    hist = Histogram.new
    tshark_radiotap_each do |hash|
      chan = hash[:chan]
      rate = hash[:rate]
      next unless chan
      next if chan > 13
      hist.add(rate)
    end

    print "#Rate, Count\n"
    print "#{hist.to_csv_key_sorted()}\n"
  end

  def execute_rate_5_histogram
    hist = Histogram.new
    tshark_radiotap_each do |hash|
      chan = hash[:chan]
      rate = hash[:rate]
      next unless chan
      next if chan <= 13
      hist.add(rate)
    end

    print "#Rate, Count\n"
    print "#{hist.to_csv_key_sorted()}\n"
  end

  def execute_data_rate_histogram
    hist = Histogram.new
    tshark_radiotap_each do |hash|
      st = hash[:st]
      rate = hash[:rate]
      if 0x20 <= st and st < 0x30
        hist.add(rate)
      end
    end

    print "#Rate, Count\n"
    print "#{hist.to_csv_key_sorted()}\n"
  end

  def execute_data_rate_24_histogram
    hist = Histogram.new
    tshark_radiotap_each do |hash|
      chan = hash[:chan]
      st = hash[:st]
      rate = hash[:rate]
      next unless chan
      next if chan > 13
      if 0x20 <= st and st < 0x30
        hist.add(rate)
      end
    end

    print "#Rate, Count\n"
    print "#{hist.to_csv_key_sorted()}\n"
  end

  def execute_data_rate_5_histogram
    hist = Histogram.new
    tshark_radiotap_each do |hash|
      chan = hash[:chan]
      st = hash[:st]
      rate = hash[:rate]
      next unless chan
      next if chan <= 13
      if 0x20 <= st and st < 0x30
        hist.add(rate)
      end
    end

    print "#Rate, Count\n"
    print "#{hist.to_csv_key_sorted()}\n"
  end

  def execute_channel_ap_histogram
    hist = Histogram.new
    tshark_radiotap_each do |hash|
      st = hash[:st]
      chan = hash[:chan]
      ta = hash[:ta]
      next unless st == 0x08 or st == 0x05
      hist.add_uniq(chan, ta)
    end
    hist.keep_uniq
    hist.fill(CHANNELS, [])

    print "#Channel, APs\n"
    print "#{hist.to_csv_key_sorted}\n"
  end

  def execute_channel_sta_histogram
    hist = Histogram.new
    tshark_radiotap_each do |hash|
      chan = hash[:chan]
      ta = hash[:ta]
      next unless chan
      hist.add_uniq(chan, ta)
    end
    hist.keep_uniq
    hist.fill(CHANNELS, [])

    print "#Channel, stations\n"
    print "#{hist.to_csv_key_sorted}\n"
  end

  def execute_channel_sta_wo_ap_histogram
    histap = Histogram.new
    tshark_radiotap_each do |hash|
      st = hash[:st]
      chan = hash[:chan]
      ta = hash[:ta]
      next unless st == 0x08 or st == 0x05
      next unless chan
      histap.add_uniq(chan, ta)
    end
    histap.keep_uniq
    histap.fill(CHANNELS, [])

    histsta = Histogram.new
    tshark_radiotap_each do |hash|
      chan = hash[:chan]
      ta = hash[:ta]
      histsta.add_uniq(chan, ta)
    end
    histsta.keep_uniq
    histsta.fill(CHANNELS, [])

    histap.each do |k, v|
      next if histsta[k] == nil or histsta[k] == []
      histsta[k] = histsta[k] - histap[k]
    end

    print "#Channel, stations\n"
    print "#{histsta.to_csv_key_sorted}\n"
  end

  def execute_channel_sta_data_histogram
    hist = Histogram.new
    tshark_radiotap_each do |hash|
      st = hash[:st]
      chan = hash[:chan]
      ta = hash[:ta]
      if 0x20 <= st and st < 0x30
        hist.add_uniq(chan, ta)
      end
    end
    hist.keep_uniq
    hist.fill(CHANNELS, [])

    print "#Channel, stations\n"
    print "#{hist.to_csv_key_sorted}\n"
  end

  def execute_channel_ap_data_histogram
    hist = Histogram.new
    tshark_radiotap_each do |hash|
      st = hash[:st]
      chan = hash[:chan]
      bssid = hash[:bssid]
      if 0x20 <= st and st < 0x30
        hist.add_uniq(chan, bssid)
      end
    end
    hist.keep_uniq
    hist.fill(CHANNELS, [])

    print "#Channel, stations\n"
    print "#{hist.to_csv_key_sorted}\n"

  end

  def execute_channel_sta_data_wo_ap_histogram
    histap = Histogram.new
    tshark_radiotap_each do |hash|
      st = hash[:st]
      chan = hash[:chan]
      ta = hash[:ta]
      next unless st == 0x08 or st == 0x05
      histap.add_uniq(chan, ta)
    end
    histap.keep_uniq
    histap.fill(CHANNELS, [])

    histsta = Histogram.new
    tshark_radiotap_each do |hash|
      st = hash[:st]
      chan = hash[:chan]
      ta = hash[:ta]
      next unless  0x20 <= st and st < 0x30
      histsta.add_uniq(chan, ta)
    end
    histsta.keep_uniq
    histsta.fill(CHANNELS, [])

    histap.each do |k, v|
      next if histsta[k] == nil or histsta[k] == []
      histsta[k] = histsta[k] - histap[k]
    end

    print "#Channel, stations\n"
    print "#{histsta.to_csv_key_sorted}\n"
  end

  def execute_channel_type_histogram
    # need another hash-like thingy?
    hist = Histogram.new
    tshark_radiotap_each do |hash|
      st = hash[:st]
      chan = hash[:chan]
      type = num2type(st)
      key = "#{chan}_#{type}"
      hist.add(key)
    end

    hist2 = {}
    hist.each do |k, v|
      chan, type = k.split("_")
      chan = chan.to_i
      hist2[chan] = {} if hist2[chan] == nil
      hist2[chan][type] = v
    end

    CHANNELS.each do |channel|
      if hist2[channel] == nil
        hist2[channel] = nil
      end
    end

    str = "#Channel,Management,Control,Data\n"
    hist2.keys.sort.each do |chan|
      _hist = hist2[chan]
      str += "#{chan},"
      if _hist == nil
        str += "0,0,0\n"
      else
        str += "#{_hist['Management'] || 0},#{_hist['Control'] || 0},#{_hist['Data'] || 0}\n"
      end
    end

    print "#{str}\n"
  end

  def execute_channel_datarate_histogram
    hist = Histogram.new
    tshark_radiotap_each do |hash|
      rate = hash[:rate]
      chan = hash[:chan]
      next if rate == 0
      key = "#{chan}_#{rate}"
      hist.add(key)
    end


    print "rate,"
    print DATARATES.join(",") + "\n"

    CHANNELS.sort.each do |chan|
      next if chan == 0
      ary = DATARATES.map do |rate|
        key = "#{chan}_#{rate}"
        if hist[key] == nil
          0
        else
          hist[key]
        end
      end

      sum = ary.inject {|acc, elm| acc + elm}
      ary = ary.map do |elm|
        elm.to_f / sum * 100.0
      end

      print "#{chan},#{ary.join(",")}\n"
    end
  end

  def execute_channel_datarate_data_histogram
    hist = Histogram.new
    tshark_radiotap_each do |hash|
      st = hash[:st]
      rate = hash[:rate]
      chan = hash[:chan]
      next unless 0x20 <= st and st < 0x30
      next if rate == 0
      key = "#{chan}_#{rate}"
      hist.add(key)
    end


    print "rate,"
    print DATARATES.join(",") + "\n"

    CHANNELS.sort.each do |chan|
      next if chan == 0
      ary = DATARATES.map do |rate|
        key = "#{chan}_#{rate}"
        if hist[key] == nil
          0
        else
          hist[key]
        end
      end

      sum = ary.inject {|acc, elm| acc + elm}
      ary = ary.map do |elm|
        elm.to_f / sum * 100.0
      end

      print "#{chan},#{ary.join(",")}\n"
    end
  end

  def execute_channel_datarate_data_noretry_histogram
    hist = Histogram.new
    tshark_radiotap_each do |hash|
      st = hash[:st]
      rate = hash[:rate]
      chan = hash[:chan]
      next unless 0x20 <= st and st < 0x30
      next if hash[:retry]
      next if rate == 0
      key = "#{chan}_#{rate}"
      hist.add(key)
    end


    print "rate,"
    print DATARATES.join(",") + "\n"

    CHANNELS.sort.each do |chan|
      next if chan == 0
      ary = DATARATES.map do |rate|
        key = "#{chan}_#{rate}"
        if hist[key] == nil
          0
        else
          hist[key]
        end
      end

      sum = ary.inject {|acc, elm| acc + elm}
      ary = ary.map do |elm|
        elm.to_f / sum * 100.0
      end

      print "#{chan},#{ary.join(",")}\n"
    end
  end


  def execute_chan_goodfcs_frame_count
    # accum = {
    # :chan => chan,
    # :start_time => time,
    # :frame_count => Integer,
    # }
    totaling = Proc.new do |accum|
      # time, channel, framecount
      print "#{accum[:start_time]}, #{accum[:chan]}, #{accum[:frame_count]}\n"
    end

    iteratee = Proc.new do |accum, hash|
      accum[:frame_count] = 0 if accum[:frame_count].nil?
      accum[:frame_count] += 1 if hash[:badfcs] == false

      accum
    end

    iterate_chan totaling, iteratee
  end

  def execute_chan_fcs_error_rate
    # accum = {
    #   :chan => chan,
    #   :start_time => time,
    #   :frame_count => Integer,
    #   :badfcs_count => Integer,
    # }
    totaling = Proc.new do |accum|
      # time, channel, percentage, frame_count, badfcs_count
      perc = accum[:badfcs_count].to_f / accum[:frame_count].to_f * 100
      print "#{accum[:start_time]}, #{accum[:chan]}, #{perc}, #{accum[:frame_count]}, #{accum[:badfcs_count]}\n"
    end

    iteratee = Proc.new do |accum, hash|
      accum[:frame_count] = 0 if accum[:frame_count].nil?
      accum[:badfcs_count] = 0 if accum[:badfcs_count].nil?

      accum[:frame_count] += 1
      accum[:badfcs_count] += 1 if hash[:badfcs] == true

      accum
    end

    iterate_chan totaling, iteratee
  end

  def execute_chan_retry_rate
    # accum = {
    #   :chan => chan,
    #   :start_time => time
    #   :frame_count => Integer,
    #   :retry_count => Integer,
    # }
    #
    # avoid badfcs count
    totaling = Proc.new do |accum|
      perc = accum[:retry_count].to_f / accum[:frame_count].to_f * 100
      print "#{accum[:start_time]}, #{accum[:chan]}, #{perc}, #{accum[:frame_count]}, #{accum[:retry_count]}\n"
    end

    iteratee = Proc.new do |accum, hash|
      accum[:frame_count] = 0 if accum[:frame_count].nil?
      accum[:retry_count] = 0 if accum[:retry_count].nil?

      if hash[:badfcs] == false
        accum[:frame_count] += 1
        accum[:retry_count] += 1 if hash[:retry] == true
      end

      accum
    end
    iterate_chan totaling, iteratee
  end

  def execute_uniq_ssid
    ssid_hash = uniq_ssid()
    ssid_hash.keys.sort.each do |ssid|
      print "#{ssid}\n"
    end
  end

  def execute_uniq_ssid_histogram
    print "#{uniq_ssid_histogram().to_csv_key_sorted}\n"
  end

  def execute_uniq_ssid_histogram_10
    print "#{uniq_ssid_histogram().to_csv_value_sorted_10}\n"
  end

  def execute_ap_recognized_span
    bssid_hash = {} # {:start_time, :last_time}
    blacklist = []
    tshark_radiotap_each do |hash|
      time = hash[:time]
      ta = hash[:ta]
      st = hash[:st]

      next unless st == 8 or st == 5

      bssid_hash[ta] = {} if bssid_hash[ta].nil?
      bssid_hash[ta][:start_time] = time if bssid_hash[ta][:start_time].nil?
      bssid_hash[ta][:last_time] = time if bssid_hash[ta][:last_time].nil?
      if bssid_hash[ta][:last_time] < time
        bssid_hash[ta][:last_time] = time
      end
    end

    bssid_hash.to_a.map{|elm|
      ta = elm[0]
      diff = elm[1][:last_time] - elm[1][:start_time]
      [ta, diff]
    }.sort{|a, b|
      a[1] <=> b[1]
    }.each do |elm|
      print "#{elm[0]}, #{elm[1]}\n"
    end
  end

  def execute_sta_wo_ap_recognized_span
    aps = uniq_aps()
    sta_hash = {} # {:start_time, :last_time}
    tshark_radiotap_each do |hash|
      time = hash[:time]
      ta = hash[:ta]
      st = hash[:st]

      next if st == 8 or st == 5

      sta_hash[ta] = {} if sta_hash[ta].nil?
      sta_hash[ta][:start_time] = time if sta_hash[ta][:start_time].nil?
      sta_hash[ta][:last_time] = time if sta_hash[ta][:last_time].nil?
      if sta_hash[ta][:last_time] < time
        sta_hash[ta][:last_time] = time
      end
    end

    sta_hash.delete_if {|key, value|
      aps.include?(key)
    }.to_a.map{|elm|
      ta = elm[0]
      diff = elm[1][:last_time] - elm[1][:start_time]
      [ta, diff]
    }.sort{|a, b|
      a[1] <=> b[1]
    }.each do |elm|
      print "#{elm[0]}, #{elm[1]}\n"
    end
  end

  def execute_chan_probereq_frame_count
    totaling = Proc.new do |accum|
      print "#{accum[:start_time]}, #{accum[:chan]}, #{accum[:frame_count]}\n"
    end

    iteratee = Proc.new do |accum, hash|
      accum[:frame_count] = 0 if accum[:frame_count].nil?
      accum[:frame_count] += 1 if hash[:badfcs] == false and hash[:st] == 0x04
      accum
    end

    iterate_chan totaling, iteratee
  end

  def execute_null_data_frame_retry_count
    totaling = Proc.new do |accum|
      perc = accum[:retry_count].to_f / accum[:frame_count].to_f * 100
      unless accum[:ta].nil?
        waited_perc = accum[:ta].inject(0){|memo, elm|
          my_perc = elm[1][:retry_count].to_f / elm[1][:frame_count].to_f * 100.0
          wait = elm[1][:frame_count].to_f / accum[:frame_count].to_f
          memo += (my_perc * wait)
        }
        stas = accum[:ta].length
      else
        waited_perc = 0.0
      end
      print "#{accum[:start_time]}, #{accum[:chan]}, #{perc}, #{accum[:frame_count]}, #{accum[:retry_count]}, #{waited_perc}, #{stas}\n"
    end

    iteratee = Proc.new do |accum, hash|
      accum[:frame_count] = 0 if accum[:frame_count].nil?
      accum[:retry_count] = 0 if accum[:retry_count].nil?

      next accum if hash[:badfcs] == true

      case hash[:st]
      when 36,37,38,39,44,46,47
        ta = hash[:ta]
        accum[:frame_count] += 1
        accum[:retry_count] += 1 if hash[:retry] == true
        accum[:ta] = {} if accum[:ta].nil?
        accum[:ta][ta] = {:frame_count => 0, :retry_count => 0} if accum[:ta][ta].nil?
        accum[:ta][ta][:frame_count] += 1
        accum[:ta][ta][:retry_count] += 1 if hash[:retry] == true
      end

      accum
    end

    iterate_chan totaling, iteratee

  end

  def execute_chan_data_n_ba_frame_rate
    totaling = Proc.new do |accum|
      accum[:data_n_ba_frame_count] = accum[:data_frame_count] + accum[:ba_frame_count]
      perc = accum[:data_n_ba_frame_count].to_f / accum[:frame_count].to_f * 100
      data_perc = accum[:data_frame_count].to_f / accum[:frame_count].to_f * 100
      ba_perc = accum[:ba_frame_count].to_f / accum[:frame_count].to_f * 100

      # start_time, chan, data/ba %, data %, ba %, data/ba count, data count,
      # ba count
      print "#{accum[:start_time]}, #{accum[:chan]}, #{perc}, #{data_perc}, #{ba_perc}, #{accum[:data_n_ba_frame_count]}, #{accum[:data_frame_count]}, #{accum[:ba_frame_count]}\n"
    end

    iteratee = Proc.new do |accum, hash|
      accum[:frame_count] = 0 if accum[:frame_count].nil?
      accum[:data_frame_count] = 0 if accum[:data_frame_count].nil?
      accum[:ba_frame_count] = 0 if accum[:ba_frame_count].nil?

      next accum if hash[:badfcs] == true
      next accum if hash[:retry] == true

      accum[:frame_count] += 1

      case hash[:st]
      when 25
        accum[:ba_frame_count] += 1
      when 32,33,34,35, 40,41,42,43
        accum[:data_frame_count] += 1
      end

      accum
    end

    iterate_chan totaling, iteratee
  end

  def execute_chan_duration
    totaling = Proc.new do |accum|
      sec = 1000.0 * 1000.0
      perc = accum[:sum_duration] / sec * 100.0

      data_perc = accum[:sum_data_duration] / sec * 100.0
      print "#{accum[:start_time]}, #{accum[:chan]}, #{accum[:sum_duration]}, #{perc}, #{accum[:sum_data_duration]}, #{data_perc}, #{accum[:sum_data_length]}\n"
    end

    iteratee = Proc.new do |accum, hash|
      accum[:sum_duration] = 0 if accum[:sum_duration].nil?
      accum[:sum_data_duration] = 0 if accum[:sum_data_duration].nil?
      accum[:sum_data_length] = 0 if accum[:sum_data_length].nil?

      next accum if hash[:badfcs] == true

      case hash[:st]
      when 32,33,34,35, 40,41,42,43
        accum[:sum_data_duration] += hash[:duration]
        accum[:sum_data_length] += (hash[:framelen] - hash[:taplen])
      end

      accum[:sum_duration] += hash[:duration]

      accum
    end

    iterate_chan totaling, iteratee
  end

  def execute_chan_ba_frame_count
    totaling = Proc.new do |accum|
      print "#{accum[:start_time]}, #{accum[:chan]}, #{accum[:frame_count]}\n"
    end

    iteratee = Proc.new do |accum, hash|
      accum[:frame_count] = 0 if accum[:frame_count].nil?

      next accum if hash[:badfcs] == true
      next accum if hash[:retry] == true

      case hash[:st]
      when 25
        accum[:frame_count] += 1
      end

      accum
    end

    iterate_chan totaling, iteratee
  end

  def execute_w58_uniq_sta
    w58_stas = []
    tshark_radiotap_each do |hash|
      next if hash[:chan] < 144

      w58_stas << hash[:ta]
    end

    w58_stas.sort.uniq.each do |sta|
      print "#{sta}\n"
    end
  end

  def execute_chan_data_frame_count
    totaling = Proc.new do |accum|
      total_count = accum[:data_count] || 0
      puts "#{accum[:start_time]}, #{accum[:chan]}, #{total_count}"
    end

    iteratee = Proc.new do |accum, hash|
      next accum if hash[:badfcs] == true

      case hash[:st]
      when 32,33,34,35,40,41,42,43 # data frame
        next accum if hash[:retry] == true # no retry
        accum[:data_count] = 0 if accum[:data_count].nil?
        accum[:data_count] += 1
      end

      accum
    end

    iterate_chan totaling, iteratee
  end

  def execute_chan_data_n_ba_bit_frame_count
    totaling = Proc.new do |accum|
      total_count = 0
      total_count += (accum[:data_count]  || 0)
      total_count += (accum[:ba_hash].values.inject(:+) || 0) unless accum[:ba_hash].nil?
      puts "#{accum[:start_time]}, #{accum[:chan]}, #{total_count}"
    end

    iteratee = Proc.new do |accum, hash|
      next accum if hash[:badfcs] == true

      case hash[:st]
      when 25 # block ack
        accum[:ba_hash] = {} if accum[:ba_hash].nil?
        ta = hash[:ta]
        ssn = hash[:ba_start]
        ba_bm_popcount = BitUtils.popcount(hash[:ba_bm])
        key = ta + ":" + ssn.to_s
        accum[:ba_hash][key] = ba_bm_popcount
      when 32,33,34,35,40,41,42,43 # data frame
        next accum if hash[:retry] == true
        accum[:data_count] = 0 if accum[:data_count].nil?
        accum[:data_count] += 1
      end

      accum
    end

    iterate_chan totaling, iteratee
  end

  def execute_chan_ba_bit_frame_count
    totaling = Proc.new do |accum|
      total_count = 0
      total_count += (accum[:ba_hash].values.inject(:+) || 0) unless accum[:ba_hash].nil?
      puts "#{accum[:start_time]}, #{accum[:chan]}, #{total_count}"
    end

    iteratee = Proc.new do |accum, hash|
      next accum if hash[:badfcs] == true

      case hash[:st]
      when 25 # block ack
        accum[:ba_hash] = {} if accum[:ba_hash].nil?
        ta = hash[:ta]
        ssn = hash[:ba_start]
        ba_bm_popcount = BitUtils.popcount(hash[:ba_bm])
        key = ta + ":" + ssn.to_s
        accum[:ba_hash][key] = ba_bm_popcount
      end

      accum
    end

    iterate_chan totaling, iteratee
  end

  def execute_chan_mcast_frame_count
    totaling = Proc.new do |accum|
      rate = accum[:mcast_frame_count].to_f / accum[:frame_count] * 100
      print "#{accum[:start_time]}, #{accum[:chan]}, #{accum[:mcast_frame_count]}, #{rate}, #{accum[:mcast_duration]}, #{accum[:mcast_calc_duration]}\n"
    end

    iteratee = Proc.new do |accum, hash|
      accum[:frame_count] = 0 if accum[:frame_count].nil?
      accum[:mcast_frame_count] = 0 if accum[:mcast_frame_count].nil?
      accum[:mcast_duration] = 0 if accum[:mcast_duration].nil?
      accum[:mcast_calc_duration] = 0 if accum[:mcast_calc_duration].nil?


      if hash[:st] < 0x20 or 0x30 <= hash[:st]
        next accum
      end
      accum[:frame_count] += 1

      if hash[:ra].downcase == "ff:ff:ff:ff:ff:ff"
        accum[:mcast_frame_count] += 1
        accum[:mcast_duration] += hash[:duration]
        accum[:mcast_calc_duration] += (hash[:framelen] - hash[:taplen]).to_f * 8 / hash[:rate]
      end

      accum
    end

    iterate_chan totaling, iteratee
  end


  #def execute_sta_rssi_variance
  #  sta_hash = {}
  #  tshark_radiotap_each do |hash|
  #    signal = hash[:signal]
  #    ta = hash[:ta]
  #    sta_hash[ta] = [] if sta_hash[ta].nil?
  #    sta_hash[ta] << signal
  #  end

  #  res_hash = sta_hash.map {|key, ary|
  #    samples = ary.length
  #    if samples == 0
  #    end

  #    min = ary.min
  #    max = ary.max
  #    avg = ary.inject(0.0) {|r,i} r+=i}/samples
  #    med = (ary.length % 2 == 0 ? ary[ary.length/2 - 1, 2].inject(:+) / 2.0 : ary[ary.length/2])
  #  }.to_h
  #end

  #def execute_ap_rssi_variance
  #end
end

def usage
  puts "Usage:  pcap80211analyzer [-dfht] -r <pcapngfile> <command>"
  puts "  -f              force cache to be generated again"
  puts "                  removes one created in 'output' directory"
  puts "  -h              show this help"
  puts "  -t              measure time consumed by force reloading"
  puts "  -r              specify target pcapng file (should be 802.11 radiotap)"
  puts "  -c              specify csv output dir"
  puts ""
  puts "<command>"
  puts "  list            list all available command"
  puts "  all             execute all supported command"
  puts ""
  exit
end

if __FILE__ == $0
  args = ARGV
  opt = OptionParser.new
  OPTS={}

  opt.on("-r VAL") {|v| OPTS[:readfrom] = v }
  opt.on("-t") {|v| OPTS[:time] = true }
  opt.on("-h") {|v| usage }
  opt.on("-d") {|v| OPTS[:debug] = true }
  opt.on("-f") {|v| OPTS[:force] = true }
  opt.on("-c VAL") {|v| OPTS[:csvdir] = v }
  opt.on("-B") {|v| OPTS[:badfcs] = true}

  opt.parse!(args)
  usage if args[0] == nil
  target = args[0]

  begin
    analyzer = Pcap80211Analyzer.new(:pcappath => OPTS[:readfrom],
                                     :time => OPTS[:time],
                                     :force => OPTS[:force],
                                     :debug => OPTS[:debug],
                                     :badfcs => OPTS[:badfcs]
                                    )
    analyzer.execute(target, OPTS)
  rescue => e
    print "Error: #{e.message} (#{e.backtrace})\n"
    exit 1
  end
end
